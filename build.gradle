plugins {
	id 'java-library'
	id 'maven-publish'
	id 'com.diffplug.spotless'
	id 'com.github.johnrengelman.shadow'
	id 'checkstyle'
}

checkstyle {
	configFile = file('checkstyle.xml')
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()
version += (ENV.GITHUB_ACTIONS ? '' : '+local')

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

configurations {
	ship
	implementation.extendsFrom ship
}

dependencies {
	ship "org.ow2.asm:asm:${asm_version}"
	ship "org.ow2.asm:asm-commons:${asm_version}"
	ship "org.ow2.asm:asm-tree:${asm_version}"
	ship "org.ow2.asm:asm-util:${asm_version}"
	ship "net.fabricmc:tiny-mappings-parser:${tiny_mappings_parser_version}"
	ship "net.fabricmc:mapping-io:${mappingio_version}"
	compileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
}

spotless {
	java {
		licenseHeaderFile(rootProject.file('HEADER'))
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': 'net.fabricmc.stitch.Main'
	}
}

shadowJar {
    configurations = [project.configurations.ship]
	archiveClassifier = 'all'
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_URL) {
			repositories.maven {
				name 'fabric'
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL('https://maven.fabricmc.net/net/fabricmc/stitch/maven-metadata.xml').text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
